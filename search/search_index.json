{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Networking in Public Cloud Deployments Networking engineers attending the Networking in Public Cloud Deployments online course had to solve several hands-on assignments, including: Define the Requirements Simple Infrastructure-as-Code Setup Deploy a Cloud-Based Web Server Deploy a Virtual Network Infrastructure Deploy IPv6 in Your Cloud Virtual Network Secure Your Virtual Network Infrastructure I reviewed every single solution submitted by the course attendees. I can\u2019t do the same for everyone else, but you might still want to try to solve at least some of the challenges.","title":"Home"},{"location":"#networking-in-public-cloud-deployments","text":"Networking engineers attending the Networking in Public Cloud Deployments online course had to solve several hands-on assignments, including: Define the Requirements Simple Infrastructure-as-Code Setup Deploy a Cloud-Based Web Server Deploy a Virtual Network Infrastructure Deploy IPv6 in Your Cloud Virtual Network Secure Your Virtual Network Infrastructure I reviewed every single solution submitted by the course attendees. I can\u2019t do the same for everyone else, but you might still want to try to solve at least some of the challenges.","title":"Networking in Public Cloud Deployments"},{"location":"EX1-Define-Requirements/","text":"Define the Requirements You were asked to participate in a project to deploy a new solution in a public cloud of your choice. This hands-on assignment is the first step in that process. Use one of your existing projects, or something one of your customers is working on, or one of the sample projects described at the bottom of this document and document the requirements: What services should the public cloud deployment offer to the customers? How will the users consume those services? Will they use Internet access, or will you have to provide a more dedicated connectivity solution? Identify the data needed by the solution you\u2019re deploying. What data is shared with other applications? Where will the data reside? What are the security requirements of your application? What are the high availability requirements? Do you have to provide connectivity to your on-premises data center? If so, how will you implement it? Do you have to implement connectivity to other (customer) sites? If so, how will you implement it? Prepare the Solution Repository You\u2019ll use Git throughout the course to manage the documentation, infrastructure-as-code definition files, and scripts you\u2019ll use to deploy your public cloud infrastructure. Prepare your Git and GitHub environment: Install Git on your workstation; Create a GitHub account; Create a new repository on GitHub; Create a local copy of that repository (GitHub has pretty good step-by-step tutorials); Tip You can use any other Git-based repository service like GitLab or BitBucket. Your repository can be private if you don\u2019t feel comfortable making it public. Sample Projects If you have no idea what project to work on, try one of these: Web site : Deploy a simple website (we\u2019ll give you all the instructions needed to deploy it) with a back-end database running on a database server. Figure out the connectivity requirements for website admins (working for your organization) and end users, depending on whether you\u2019d be deploying a public or internal website. Data archive : You\u2019ll use public cloud infrastructure to archive data from your organization.","title":"Define the Requirements"},{"location":"EX1-Define-Requirements/#define-the-requirements","text":"You were asked to participate in a project to deploy a new solution in a public cloud of your choice. This hands-on assignment is the first step in that process. Use one of your existing projects, or something one of your customers is working on, or one of the sample projects described at the bottom of this document and document the requirements: What services should the public cloud deployment offer to the customers? How will the users consume those services? Will they use Internet access, or will you have to provide a more dedicated connectivity solution? Identify the data needed by the solution you\u2019re deploying. What data is shared with other applications? Where will the data reside? What are the security requirements of your application? What are the high availability requirements? Do you have to provide connectivity to your on-premises data center? If so, how will you implement it? Do you have to implement connectivity to other (customer) sites? If so, how will you implement it?","title":"Define the Requirements"},{"location":"EX1-Define-Requirements/#prepare-the-solution-repository","text":"You\u2019ll use Git throughout the course to manage the documentation, infrastructure-as-code definition files, and scripts you\u2019ll use to deploy your public cloud infrastructure. Prepare your Git and GitHub environment: Install Git on your workstation; Create a GitHub account; Create a new repository on GitHub; Create a local copy of that repository (GitHub has pretty good step-by-step tutorials); Tip You can use any other Git-based repository service like GitLab or BitBucket. Your repository can be private if you don\u2019t feel comfortable making it public.","title":"Prepare the Solution Repository"},{"location":"EX1-Define-Requirements/#sample-projects","text":"If you have no idea what project to work on, try one of these: Web site : Deploy a simple website (we\u2019ll give you all the instructions needed to deploy it) with a back-end database running on a database server. Figure out the connectivity requirements for website admins (working for your organization) and end users, depending on whether you\u2019d be deploying a public or internal website. Data archive : You\u2019ll use public cloud infrastructure to archive data from your organization.","title":"Sample Projects"},{"location":"EX2-Infrastructure-as-Code/","text":"Simple Infrastructure-as-Code Setup In the second hands-on exercise, you\u2019ll: Select your public cloud provider, Create a public cloud account, Prepare your infrastructure-as-code environment. Selecting the Public Cloud Provider You can select any public cloud provider of your choice as long as they provide interesting enough networking features, including: Private per-tenant networks and subnets; Per-tenant private addressing and NAT between tenant addresses and public IPv4 addresses; Security groups and stateful filters in front of VM interfaces; Multiple availability zones and regions; Optional: IPv6 connectivity; AWS, Azure, Google Cloud, and Oracle Cloud Infrastructure (OCI) meet all these requirements. We have in-depth materials covering AWS and Azure ; your job might be a bit easier if you select one of these two, but please feel free to work with whatever public cloud provider makes the most sense for you. Before you can get any work done, you\u2019ll need an account with the selected public cloud provider. AWS and OCI provide a long-term free tier (if you consume only a few resources), and Azure has time-limited free trials. You\u2019ll have to provide credit card details, but if you\u2019re at least a bit careful and shut down the resources after you\u2019re done with hands-on exercises, you won\u2019t get charged much (my Azure bills were around $1). Selecting the Infrastructure-as-Code Tool You can work with any tool (free or commercial, open- or closed-source), or you could hack together a solution in Bash, Python, or any other programming language of your choice as long as the solution supports infrastructure-as-code concepts and meets a few additional requirements: You can describe the target infrastructure in machine- and human-readable definition files that can be tracked as text files with Git; The tool supports idempotent deployments: you can execute the deploy process multiple times with no changes in the target infrastructure if the state of the infrastructure already matches your desired state; The tool supports adds, removals, and changes. Tip Implementing the last requirement with a home-brewed solution is complex. For example, my Bash scripts support idempotent infrastructure creation but not changes or removals. Ansible and Terraform meet all the requirements (although resource removal tends to get clumsy with Ansible). Terraform is usually a better fit, but you won\u2019t find any training materials on ipSpace.net. We described Ansible core functionality extensively in the past and added cloud-specific material for AWS and Azure. You can also use cloud-specific tools like AWS CloudFormation or Azure Resource Manager. Your First Infrastructure-as-Code Deployment After creating an account with a public cloud provider and selecting the IaC tool, create a single public cloud resource using the infrastructure-as-code tool of your choice. You could do something as simple as creating a tenant network (VPC/Vnet) with RFC 1918 prefix, or you could deploy a virtual machine. After you manage to create the selected public cloud resource, change the definition file to rename it, change its parameters, or remove it. Finally, commit the definition file and a short description of your work (preferably in Markdown format) to your Git repository, and push the changes to your hosted repository. Warning Always store your public cloud credentials (account ID, secret keys, passwords) outside of Git repositories.","title":"Simple Infrastructure-as-Code Setup"},{"location":"EX2-Infrastructure-as-Code/#simple-infrastructure-as-code-setup","text":"In the second hands-on exercise, you\u2019ll: Select your public cloud provider, Create a public cloud account, Prepare your infrastructure-as-code environment.","title":"Simple Infrastructure-as-Code Setup"},{"location":"EX2-Infrastructure-as-Code/#selecting-the-public-cloud-provider","text":"You can select any public cloud provider of your choice as long as they provide interesting enough networking features, including: Private per-tenant networks and subnets; Per-tenant private addressing and NAT between tenant addresses and public IPv4 addresses; Security groups and stateful filters in front of VM interfaces; Multiple availability zones and regions; Optional: IPv6 connectivity; AWS, Azure, Google Cloud, and Oracle Cloud Infrastructure (OCI) meet all these requirements. We have in-depth materials covering AWS and Azure ; your job might be a bit easier if you select one of these two, but please feel free to work with whatever public cloud provider makes the most sense for you. Before you can get any work done, you\u2019ll need an account with the selected public cloud provider. AWS and OCI provide a long-term free tier (if you consume only a few resources), and Azure has time-limited free trials. You\u2019ll have to provide credit card details, but if you\u2019re at least a bit careful and shut down the resources after you\u2019re done with hands-on exercises, you won\u2019t get charged much (my Azure bills were around $1).","title":"Selecting the Public Cloud Provider"},{"location":"EX2-Infrastructure-as-Code/#selecting-the-infrastructure-as-code-tool","text":"You can work with any tool (free or commercial, open- or closed-source), or you could hack together a solution in Bash, Python, or any other programming language of your choice as long as the solution supports infrastructure-as-code concepts and meets a few additional requirements: You can describe the target infrastructure in machine- and human-readable definition files that can be tracked as text files with Git; The tool supports idempotent deployments: you can execute the deploy process multiple times with no changes in the target infrastructure if the state of the infrastructure already matches your desired state; The tool supports adds, removals, and changes. Tip Implementing the last requirement with a home-brewed solution is complex. For example, my Bash scripts support idempotent infrastructure creation but not changes or removals. Ansible and Terraform meet all the requirements (although resource removal tends to get clumsy with Ansible). Terraform is usually a better fit, but you won\u2019t find any training materials on ipSpace.net. We described Ansible core functionality extensively in the past and added cloud-specific material for AWS and Azure. You can also use cloud-specific tools like AWS CloudFormation or Azure Resource Manager.","title":"Selecting the Infrastructure-as-Code Tool"},{"location":"EX2-Infrastructure-as-Code/#your-first-infrastructure-as-code-deployment","text":"After creating an account with a public cloud provider and selecting the IaC tool, create a single public cloud resource using the infrastructure-as-code tool of your choice. You could do something as simple as creating a tenant network (VPC/Vnet) with RFC 1918 prefix, or you could deploy a virtual machine. After you manage to create the selected public cloud resource, change the definition file to rename it, change its parameters, or remove it. Finally, commit the definition file and a short description of your work (preferably in Markdown format) to your Git repository, and push the changes to your hosted repository. Warning Always store your public cloud credentials (account ID, secret keys, passwords) outside of Git repositories.","title":"Your First Infrastructure-as-Code Deployment"},{"location":"EX3-Deploy-Web-Server/","text":"Deploy a Cloud-Based Web Server In the third hands-on exercise, you\u2019ll deploy a single virtual machine running a web server. You could use a Windows or a Linux virtual machine; I recommend creating an Ubuntu VM. Use the infrastructure-as-code tool you selected in the previous exercise to create the infrastructure and (optionally) provision the server. Tip You\u2019re highly encouraged to create some other combination of compute and storage infrastructure, in particular, if you can solve an actual problem you\u2019re facing\u2026 just keep it simple enough that you\u2019ll be able to complete it in a reasonable amount of time - there will be plenty of opportunities for more complex work. When Using AWS Create an SSH key pair. Deploy a virtual machine in the default VPC Create a public S3 bucket. Upload a picture (JPG or PNG file) of your choice into that bucket. Turn the S3 bucket into a static website. Notes: You could use an automation tool module to find the VM image (AMI) ID or cheat and find it through GUI (start deploying a VM through GUI and write down the AMI ID). When Using Azure Deploy a virtual machine with a minimal set of options. Networking objects will be created automatically. Create an Azure storage account. Upload a picture of your choice. Turn the storage account into a static website. Notes: While you could use any automation tool to get the job done, you probably won\u2019t need more than a simple bash script. Complete the Deployment Install and enable a web server (Apache or Nginx if you use Linux) on your VM. Add a static web page that references the picture in your cloud storage (Optional) Use server-side include to add ifconfig printout to the web page. You will need this (or similar) functionality when deploying web servers in multiple availability zones. Try to use an automation tool to provision the web server, and if at all possible, use the dynamic inventory features of your tool to fetch the VM details from your cloud orchestration system. Wrap Up To complete the exercise, commit your work and a short description of what you did (preferably in Markdown format) to your Git repository and push the changes to your hosted repository.","title":"Deploy a Cloud-Based Web Server"},{"location":"EX3-Deploy-Web-Server/#deploy-a-cloud-based-web-server","text":"In the third hands-on exercise, you\u2019ll deploy a single virtual machine running a web server. You could use a Windows or a Linux virtual machine; I recommend creating an Ubuntu VM. Use the infrastructure-as-code tool you selected in the previous exercise to create the infrastructure and (optionally) provision the server. Tip You\u2019re highly encouraged to create some other combination of compute and storage infrastructure, in particular, if you can solve an actual problem you\u2019re facing\u2026 just keep it simple enough that you\u2019ll be able to complete it in a reasonable amount of time - there will be plenty of opportunities for more complex work.","title":"Deploy a Cloud-Based Web Server"},{"location":"EX3-Deploy-Web-Server/#when-using-aws","text":"Create an SSH key pair. Deploy a virtual machine in the default VPC Create a public S3 bucket. Upload a picture (JPG or PNG file) of your choice into that bucket. Turn the S3 bucket into a static website. Notes: You could use an automation tool module to find the VM image (AMI) ID or cheat and find it through GUI (start deploying a VM through GUI and write down the AMI ID).","title":"When Using AWS"},{"location":"EX3-Deploy-Web-Server/#when-using-azure","text":"Deploy a virtual machine with a minimal set of options. Networking objects will be created automatically. Create an Azure storage account. Upload a picture of your choice. Turn the storage account into a static website. Notes: While you could use any automation tool to get the job done, you probably won\u2019t need more than a simple bash script.","title":"When Using Azure"},{"location":"EX3-Deploy-Web-Server/#complete-the-deployment","text":"Install and enable a web server (Apache or Nginx if you use Linux) on your VM. Add a static web page that references the picture in your cloud storage (Optional) Use server-side include to add ifconfig printout to the web page. You will need this (or similar) functionality when deploying web servers in multiple availability zones. Try to use an automation tool to provision the web server, and if at all possible, use the dynamic inventory features of your tool to fetch the VM details from your cloud orchestration system.","title":"Complete the Deployment"},{"location":"EX3-Deploy-Web-Server/#wrap-up","text":"To complete the exercise, commit your work and a short description of what you did (preferably in Markdown format) to your Git repository and push the changes to your hosted repository.","title":"Wrap Up"},{"location":"EX4-Deploy-Virtual-Network/","text":"Deploy a Virtual Network Infrastructure In the previous hands-on exercise , you deployed a virtual machine into a default VPC (AWS) or used auto-created networking objects to simplify your deployment (Azure). In this exercise, you\u2019ll create a full-blown custom networking infrastructure using the infrastructure-as-code tool of your choice. Tip You\u2019re highly encouraged to create networking infrastructure relevant to an actual problem you\u2019re facing, as long as it includes most of the components you\u2019re expected to use and is simple enough to be completed in a reasonable amount of time. When Using AWS Create a VPC and two subnets (public and private). Create an Internet Gateway and associate it with the VPC Create a route table for the public subnet and add a default route pointing to the Internet gateway Adjust the default security group to allow HTTP, HTTPS, and SSH access to all virtual machines. Use GUI if necessary. Optional: Create an elastic IP address and an elastic network interface. When Using Azure Create a VNet and two subnets (public and private). Create a route table that prevents Internet access from virtual machines in the private subnet Use open_ports parameter of azure_rm_virtualmachine Ansible module (or equivalent CLI/Terraform parameter) to enable HTTP, HTTPS, and SSH access to all VM instances Optional: Create public IP addresses and VM NICs for virtual machines in the public subnet Complete the deployment Deploy a web server in the public subnet (use the tools you created in the previous exercise to deploy it). Deploy an SSH jump host in the public subnet. Deploy another VM instance in the private subnet. Connectivity tests Verify that: You can open an SSH session to the web server and jump host from the Internet; You can download a web page from the web server; Jump host can open an SSH session to a VM instance in the private subnet; The VM instance in the private subnet cannot reach destinations outside of your virtual network. Optional: Write an automated test suite (for example, an Ansible playbook). Tip If you use Ansible, use delegate_to or SSH proxy functionality to access VM instances through the jump host. Wrap Up To complete the exercise, commit your work and a short description of what you did (preferably in Markdown format) to your Git repository and push the changes to your hosted repository.","title":"Deploy a Virtual Network Infrastructure"},{"location":"EX4-Deploy-Virtual-Network/#deploy-a-virtual-network-infrastructure","text":"In the previous hands-on exercise , you deployed a virtual machine into a default VPC (AWS) or used auto-created networking objects to simplify your deployment (Azure). In this exercise, you\u2019ll create a full-blown custom networking infrastructure using the infrastructure-as-code tool of your choice. Tip You\u2019re highly encouraged to create networking infrastructure relevant to an actual problem you\u2019re facing, as long as it includes most of the components you\u2019re expected to use and is simple enough to be completed in a reasonable amount of time.","title":"Deploy a Virtual Network Infrastructure"},{"location":"EX4-Deploy-Virtual-Network/#when-using-aws","text":"Create a VPC and two subnets (public and private). Create an Internet Gateway and associate it with the VPC Create a route table for the public subnet and add a default route pointing to the Internet gateway Adjust the default security group to allow HTTP, HTTPS, and SSH access to all virtual machines. Use GUI if necessary. Optional: Create an elastic IP address and an elastic network interface.","title":"When Using AWS"},{"location":"EX4-Deploy-Virtual-Network/#when-using-azure","text":"Create a VNet and two subnets (public and private). Create a route table that prevents Internet access from virtual machines in the private subnet Use open_ports parameter of azure_rm_virtualmachine Ansible module (or equivalent CLI/Terraform parameter) to enable HTTP, HTTPS, and SSH access to all VM instances Optional: Create public IP addresses and VM NICs for virtual machines in the public subnet","title":"When Using Azure"},{"location":"EX4-Deploy-Virtual-Network/#complete-the-deployment","text":"Deploy a web server in the public subnet (use the tools you created in the previous exercise to deploy it). Deploy an SSH jump host in the public subnet. Deploy another VM instance in the private subnet.","title":"Complete the deployment"},{"location":"EX4-Deploy-Virtual-Network/#connectivity-tests","text":"Verify that: You can open an SSH session to the web server and jump host from the Internet; You can download a web page from the web server; Jump host can open an SSH session to a VM instance in the private subnet; The VM instance in the private subnet cannot reach destinations outside of your virtual network. Optional: Write an automated test suite (for example, an Ansible playbook). Tip If you use Ansible, use delegate_to or SSH proxy functionality to access VM instances through the jump host.","title":"Connectivity tests"},{"location":"EX4-Deploy-Virtual-Network/#wrap-up","text":"To complete the exercise, commit your work and a short description of what you did (preferably in Markdown format) to your Git repository and push the changes to your hosted repository.","title":"Wrap Up"},{"location":"EX5-Deploy-IPv6/","text":"Deploy IPv6 in Your Cloud Virtual Network This exercise seems easy but might require extensive research: Enable dual stack (IPv4 + IPv6) throughout the virtual networking infrastructure you created in the previous exercise . Enable IPv6 on your virtual machines Test HTTPS/SSH connectivity over IPv6 Tip You can skip this exercise and focus on more exciting topics if you feel IPv6 is (not yet) relevant to your environment.","title":"Deploy IPv6 in Your Cloud Virtual Network"},{"location":"EX5-Deploy-IPv6/#deploy-ipv6-in-your-cloud-virtual-network","text":"This exercise seems easy but might require extensive research: Enable dual stack (IPv4 + IPv6) throughout the virtual networking infrastructure you created in the previous exercise . Enable IPv6 on your virtual machines Test HTTPS/SSH connectivity over IPv6 Tip You can skip this exercise and focus on more exciting topics if you feel IPv6 is (not yet) relevant to your environment.","title":"Deploy IPv6 in Your Cloud Virtual Network"},{"location":"EX6-Security/","text":"Secure Your Virtual Network Infrastructure In the last hands-on exercises, you created a virtual network , a private and a public subnet , and deployed several virtual machines . Now, it\u2019s time to secure your deployment. Tip You\u2019re highly encouraged to continue working on a challenge relevant to an actual problem you\u2019re facing, as long as it includes most of the components you\u2019re expected to use and is simple enough to be completed in a reasonable amount of time. Traffic Filters Using appropriate mechanisms offered by the public cloud environment you chose, apply traffic filters that will limit the traffic according to these rules: Anyone can connect to the Web server over HTTP and HTTPS; Specified IP addresses can connect to the SSH jump host over SSH; SSH jump host can connect to any VM within your virtual network over SSH; Web server(s) can connect to database server(s) over HTTP and MySQL (or any other similar service) Database server(s) can communicate over HTTP and MySQL Identity and Access Management Create multiple users within your account (or subscription): A user with read-only access - when using those credentials, you should be able to see the networking and compute resources but not modify them. A user that can modify the storage bucket you created in the third exercise but not anything else (optional) A user that can view networking resources and modify compute resources. Split your deployment procedure into two parts, and deploy networking and compute resources using two separate users (optional) Application firewall (optional) Add a web application firewall in front of your web server and block any attempts to access /admin or /login URLs. Session logging (optional) Log all sessions to and from the SSH jump host.","title":"Secure Your Virtual Network Infrastructure"},{"location":"EX6-Security/#secure-your-virtual-network-infrastructure","text":"In the last hands-on exercises, you created a virtual network , a private and a public subnet , and deployed several virtual machines . Now, it\u2019s time to secure your deployment. Tip You\u2019re highly encouraged to continue working on a challenge relevant to an actual problem you\u2019re facing, as long as it includes most of the components you\u2019re expected to use and is simple enough to be completed in a reasonable amount of time.","title":"Secure Your Virtual Network Infrastructure"},{"location":"EX6-Security/#traffic-filters","text":"Using appropriate mechanisms offered by the public cloud environment you chose, apply traffic filters that will limit the traffic according to these rules: Anyone can connect to the Web server over HTTP and HTTPS; Specified IP addresses can connect to the SSH jump host over SSH; SSH jump host can connect to any VM within your virtual network over SSH; Web server(s) can connect to database server(s) over HTTP and MySQL (or any other similar service) Database server(s) can communicate over HTTP and MySQL","title":"Traffic Filters"},{"location":"EX6-Security/#identity-and-access-management","text":"Create multiple users within your account (or subscription): A user with read-only access - when using those credentials, you should be able to see the networking and compute resources but not modify them. A user that can modify the storage bucket you created in the third exercise but not anything else (optional) A user that can view networking resources and modify compute resources. Split your deployment procedure into two parts, and deploy networking and compute resources using two separate users (optional)","title":"Identity and Access Management"},{"location":"EX6-Security/#application-firewall-optional","text":"Add a web application firewall in front of your web server and block any attempts to access /admin or /login URLs.","title":"Application firewall (optional)"},{"location":"EX6-Security/#session-logging-optional","text":"Log all sessions to and from the SSH jump host.","title":"Session logging (optional)"}]}